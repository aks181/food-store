> Before building always plan your app, visualize it using wire-frames, mockups, designs etc

> Comments in JSX can be written using {/*   */}
> Lay out a basic component structure/hierarchy
> Passing a props to a component is same as passing an argument to a function  
> props is an object
> pass any number of props and use as props in the comp 
> Config driven UI - website driven UI/data/configuration (diff UI based on diff parameters) 
> props can be used as props object or destructure on the fly or destructure in component

> use map instead of for loop to render lists
> use a unique key for each list item mandatorily as it helps react to uniquely identify each element so that when lists are modified, older elements are not rerendered, only new ones are rendered
> if no unique key is available then index can be used as key but it is not recommended
> use index only and only if list is static, contents are fixed with no possible addition/deletion/modification and a unique id is not present in data

✅when using images in react mostly local images stored at some path, they dont render by just specifying the path(both with parcel and webpack), to load them either - 
    1-> do path={require('../../imgPAth.jpg")}
    2-> const url = new URL('../imgpath', import.meta.url); 
    img src={url}
    3-> import logo from '../../filepath.jps'
    img src={logo}

/******** Assg -4 ***************/
> <React.Fragment></React.Fragment> can be used to enclose multiple elements if we want to return them from one component without adding extra dom nodes like divs. e.g. a Columns component will return multiple <td>s so they can be enclosed within or <></>. Only key attribute can be used and that too with React.Fragment

Ep.5--
> follow any type of folder structure which suits your needs and organizes well
> Components files can be inside components folder but should start with a capital letter and SHOULD/CAN match the component name
> extension can be .js or .jsx, similarly while importing u can write/avoid .js/.jsx
> Imports/Exports 2 types-
    1. Default import/Exports
    (can be only 1 in a file)

    export default ComponentName
    import ComponentName from "path";

    22. Named import/export
    (used when multiple exports are needed from same file)

    export const VARIABLE_1 = __ ;
    export const VARIABLE_2 = ** ;
    import { VARIABLE_1 } from "path";

> We can do both Named and default exports from same file.

> We can use onClick, onMouseEnter etc events on elements like onClick={() => {callback function JS code}}

/*********************************** HOOKS **************/

> React is good at rendering, rerendering and dom manipulations

> Hook is a normal JS utility function 
> If we modify a list stored in a normal JS variable(e.g.filter), the variable's value changes but it is not reflected on the UI.
> State is a super powerful variable which is created as
    const [listOfHotels, setListOfHotels] = useState([])
    useState takes default value of the state variable
> If we update the list using a state variable then it automatically refreshes/updates the UI(render) provided that we update the value using the set function ONLY(This triggers diff algorithm).
UI is kept in sync with the data(ui layer and data layer). => When a state variable updates, then react rerenders the component.
> useState basically returns an array whose arr[0]= listOfHotels and arr[1]=setListOfHotels (we just use array destructuring on the fly)

=> Best practices related to hooks :- 
> no use of useState outside component - also throws error- since it is used to create local state variables inside function component
> declare all useState hooks at the top
> don't use useState inside conditions, for loops, inside functions like if(valid but not to be done)
> Don't create component inside component
> useEffect can be used multiple times in a component

=> Reconciliation Algorithm (React Fiber came in R16) - 
- Virtual DOM - is representation of actual DOM ( JS object created by a component )
- Diff Algorithm calculates diff between old and new virtual DOM and then updates the DOM
- React efficiently keeps track of all DOM nodes and using their corresponding objects(virtual dom for React) compares the changes and updates the UI
- Reconciliation is the process by which VDOM is kept in sync with the real DOM by a library like ReactDOM
- Apart from React elements, react also uses internal objects(fibers) to hold additional info about the component tree.

========================= EP 6- Explore the world ====================
> Monolith vs Microservices architecture
In Monolith, all the services exist within one single massive project, all backend, database, UI, auth etc and for even small change the whole project is built and deployed.
In microservices, all services are standalone in themselves having their own tech stack and functionality, and interact with each other to form a complete application. This is known as separation of concerns or single responsibility principle. These services operate on different ports and all these ports are connected to the backend 

=> Approaches to fetch data from any API
    1. Load the app -> fetch the data(wait till it comes) -> render the UI
    2. Load the app -> Render the UI -> fetch the data -> rerender the UI
In React, we will follow 2 as it provides better UX

=> useEffect Hook -
    useEffect(); --function
    useEffect(a,b); --takes 2 arguments
    useEffect(() => {
        //callback function
    }, [])          --first is a callback function, 2nd is a dependency array

    This useEffect hook callback function code is run AFTER the component has rendered.

⭐=> dependency array is not mandatory only callback function is mandatory. 3 cases-
    1. useEffect(() => { //... }) ==> no dep array, so function will be executed after every    render
    2. useEffect(() => { //... }, []) ==> empty dep array, so function will be executed ONLY after first/initial render
    3. useEffect(() => { // ... }, [dependencyVariable]) ==> called after initial and after every time dependencyVariable changes

- Conditional rendering - rendering based on some condition. e.g. Shimmer UI
- when any local state variable is updated, react triggers a reconciliation cycle and the WHOLE component is rerendered (component function is called again), and not just the changing thing e.g. if login btn changes to logout in complete header, not just btn but whole component rerenders
- when setStateVariable is called, it rerenders the whole component with a new stateVariable which is a new stateVariable different from previous i.e. why we destructure useState using const 
- to show fetched data on UI, u will need state variables
- useEffect also returns a callback function which can be used to create a cleanup like thing like we do in componentWillUnmount
- simply return () => {
    //clean up code
}

========================= EP 7 - Routing ====================
> library is react-router-dom (latest v is 6.11+) - also 5 was majorly used before
> first we import createBrowserRouter in our app component
> this createBrowserRouter takes in a config which is an array of objects, in which each object corresponds to a route and the component that needs to be displayed on the route (Component name is written as is not </> notation)
> we can also use element to specify component but then write in <>
> it also provides a RouterProvider component that provides our routes to the app and renders them
> to handle unknown routes, a config object can also have errorElement which specifies the component to render on error (Component name has to be in component notation)
> useRouterError() is a hook provided by react-router-dom which tells details about the error and can be used for better error handling ux

> Child routes - sub routes for a path
> Outlet - just like <router-outlet> - gets replaced by component as per route
> Link - makes anything a link, instead of a href we use Link to="route"
> client-side routing - what we do on react vs server side routing what we do in normal web pages

> Link element at the end is an <a href> on UI
> key attrib should always be on the parent element that is rendered using map

============================ EP 7 - Class based components ====================

> Class based components -
  - Are a JS class
  - extend React.Component to behave like a component
  - have a render() method which return a piece od JSX
  - similar to invoking a function, for a class its instance is created
  - so when a class based component is rendered, its instance is mounted to the UI
  - constructor is always called once and first when instantiating a class and then render is called 
  - props are received in the constructor
  - super(props) is required to make these props accessible throughout the class
  - By using the super constructor with a props argument, the component is able to inherit the properties of the parent component and also access the new props that have been passed in. This allows the component to make use of the properties of both the parent component and the new props in its render method.
  - by using super(props), props can be used with 'this' inside the constructor.
  - state is set in constructor as a state object
  - unlike multiple useState hooks, all state variables are set in a single object
  - state Variables are accessible by this.state.variableName
  - Never update state variables directly
  - use this.setState({ stateVariableName: update}) - takes an object whose key is state variable name without this.state and then u can update
  - use a single setState if you want to modify multiple state variables on a single event
  - if you  update 2 out of 5 state variables, only those are updates, rest are not touched
  - First Constructor is called -> then render is called -> componentDidMount is called
  - even if we have a parent child component composition, order would be Parent Constructor - P render - Child constructor - C render - C componentDidMount - P componentDidMount
  - componentDidMount is called once component is mounted completely including all children
  - thats y cdm is ideal for making api calls just like useEffect(()=> {}, [])
  - react lifecycle has 2 phases (https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)
    > render phase ( constructor call and render )
    > commit phase ( DOM updation & componentDidMount )
  - So if in case we have 2 or more child elements in a parent, then react will patch their render phase for optimization
  - So order will be P constructor -> P render -> C1 constructor -> C1 render -> C2 constructor -> C2 render -> C1 CDM -> C2 CDM -> P CDM
  - Since commit phase(DOM updation) is expensive task, so react batches render phases & commit phase

  - like in functional components to make api calls in class based component, we can do
    async componentDidMount() {
        const data = await fetch('url')
    }
  - When setState is called it rerenders the component with updated data from the api and after that componentDidUpdate() is called
  - componentWillUnmount() is called before component is removed from the UI
  - Never co-relate componentDidMount with useEffect
  - cdm runs after only initial render and componentDidUpdate runs after every ender(update)
  - to do something like useEffect with one or two dependency variables, we do
    componentDidUpdate(prevProps, prevState) {
        if(this.state.count !== prevState.count || this.state.count2 !== prevState.count2)
    }
 - to do different things on diff dep variable change, write multiple if conditions like above
 - if we start a timer using setInterval in the cdm of a component, then we should clean it up in componentWillUnmount() otherwise interval code will keep on running since it is SPA even if you change routes
 - same thing we can do in functional component using useEffect
 - Hooks can only be called inside of the body of a function component.

================================== EP 8 -> Optimizing ================================

> Single responsibility principle - promotes reusability, maintainable, testable
> write code in modular fashion, clean, light weight
> Custom hooks - to abstract functionality from component like api calls and all so component has single responsibility of displaying data
> ⭐  useEffect(() => {
    fetchData();
  }, []);  is different from useEffect(()=> fetchData(), [])
  since second syntax means that you are returning a function, and useEffect can only return a clean up function
> Breaking our code into logical areas of functionality, related features since bundler keeps all code in 1 js file, and as app grows this js file increases in size thus impacting load times
    - Chunking
    - Code splitting
    - Lazy loading
    - Dynamic bundling
    - Dynamic importing
    - On demand loading
> Not loading the components(heavy) until they have to be used
> to lazy load a component, import it dynamically using lazy function by react
> lazy takes a callback which imports the component
> But this gives an error as a bundle takes some time to load and react tries to render in that time so gives error
> So to defer react from rendering until the bundle has loaded we wrap the element in <Supense></Supense>
> this tag takes a fallback prop to show something in the time the bundle is loaded and rendered

================================= EP 9 -> Styling ======================
> simple css, sass(scss), styled components, Material UI, Chakra UI, Ant Design , Bootstrap, Tailwind css
> postcss tool to transform css with Js ( tailwind uses postcss)
> npx tailwind init - creates a tailwind.config.js
> create .postcssrc and paste a plugin of tailwind
> any file under src can use tailwind css like html, js, ts, jsx, tsx
> has class names for pretty much everything
> works like a charm with tailwind css intellisense
> if exact pixel required you can write w-[200px]
> pros - no switching, very light weight with dynamic imports (imports only that css which is required in project absolutely, nothing else, and also single import even if class used 100 times)
> cons - with more classes on a element, code becomes ugly and less readable
> hover:bg-gray-200 focus:border (repeat hover/focus for multiple styles)
> sm:bg-pink lg:bg-yellow
> dark:bg-gray
> arbitrary values are given in [], special syntax for box shadow type thing
> there are some default behaviors that tailwind breaks intentionally like un-styling headings, lists (https://tailwindcss.com/docs/preflight) 

================================= EP 10 -> More features ====================
> Higher order components - function which takes a component and returns a component 
> takes a function modifies it and returns it
> Kind of wrapper functions and are pure functions
> syntax - const hoComponent = (NormaComponent) = > {
    return(()=> {                 //returns a component(props are received here)
            return (                //component returns JSX
                //JSX
            )
        }
    )
}

> Controlled and Uncontrolled components - If a component is managing its own state and its behavior is not controlled by parent comp -> Uncontrolled
> if parent managing the state of child comp, then controlled comp eg. accordion example. On other words, if major info is coming as props rather than local state
> to change parent state from child comp, we can pass setStateVariable function to child as a prop as a reference and there it can be called
> Lifting state up - when we want to change the state of two comps always together, we remove state from both of them and move it to their closest common parent

> Props drilling - problem of passing down data as props through multiple levels of component hierarchy even though the intermediate ones might not need it and are just used to ship it down
> e.g. logged in user data, theme data etc - some type of data which might be useful at any level of aur app
> React context solves the issue of app wide data sharing
> create a context using createContext(<data>)
> Use only data that is required app wide in context and not all data
> use it anywhere using useContext hook by passing that context variable
> in class based comps, use <ContextName.Consumer>
{(data) => console.log(data)}
</ContextName.Consumer>
> to update the value of context, use <Context.Provider value={updated Data}></Context.Provider> and wrap your components in which you want updated info
> providers can be nested with different data also and there can be multiple providers
> when providing value using provider to app, and you want to modify this value from a component, then pass the set method also along(inside) with value and then call this function in the component

//app.js
 const [userName, setUserName] = useState("");
  useEffect(() => {
    setUserName("Akshay Singhal");
  }, []);

  return (
    <UserContext.Provider value={{ loggedInUser: userName, setUserName }}>
      <div className="app">
        <Header />
        <Outlet />
      </div>
    </UserContext.Provider>
  );
};

//component.js
 const user = useContext(UserContext);
 or const {setUserName} = useContext(UserContext);

 <input
        type="text"
        className="p-5 pl-3 border"
        value={user.loggedInUser}
        onChange={(e) => user.setUserName(e.target.value)}
    />
> ⭐context updates even that code which is not even loaded(lazy loaded components) when they are loaded they have updated info
> for small to medium, context is fine, even for large but redux is more popular
> using provider overrides the default value
> tying context to a state variable, can update data throughout


========================== EP 11 - Redux ===============================================

> redux toolkit - new way to implement redux
> npm i @reduxjs/toolkit npm i react-redux
> creating a store - const appStore = configureStore()
> providing store to application using Provider from react-redux
  - wrapping whole app in <Provider store={appStore} />
> creating a cartSlice using createSlice({
  name: 'cart',
  initialState: {
    items: []
  },
  reducers: {
    addItem: (state, action) => {
      state.items.push(action.payload)
    },
    more reducers like this
  }
})

- export default cartSlice.reducer
- export const {addItem, removeItem} = cartSlice.actions
> now this reducer is imported in to a app store where they are combined to make store level reducer
> mutating of state is done in reducer functions
> subscribing to a store using a selector - hook useSelector((store)=> store.cart.items)
> action creators use useDispatch hook to dispatch the data which is automatically read as payload in reducer functions


> whenever using selector to subscribe to the store, only subscribe to the right portion of store to improve performance and also no need to update unrelated components
> reducers vs reducer
> vanilla redux - Dont mutate the state and return was mandatory(return new state)
> toolkit - HAVE to mutate the state, dont return(however redux is using immutable object(immerjs) behind the scenes)
> console log in redux dont work normally, use current() function
> RTK- either mutate the state or return a new State
> Redux dev tools
> RTK query - new version of redux thunk and middlewares
